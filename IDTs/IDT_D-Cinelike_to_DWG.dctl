// IDT D-Gamut/DJI D-Cinelike to DaVinci Wide Gamut/DaVinci Intermediate

// This DCTL was created by Nicolas Wojdacki and is free to use or edit



__DEVICE__ float ALTCinelike_to_Linear(float value)
{

    float lin= 1-(pow((1-value)/(1-0), 0.46)*1);
    float func = lin*(1 - -0.00) + -0.00;

    float cal = (1.31648041f*pow(value, 3.0) - 0.97415041f*pow(value, 2.0) + 0.77345304f*value - 0.01314609f);
    

    return cal;
}

__DEVICE__ float3 D-Gamut_to_DWG(float3 rgb) {
    // Conversion matrix from Rec.2020 to DaVinci Wide Gamut
    float3x3 M_A_to_B = float3x3(
        0.9080,  0.0129,  0.0791,
        0.0310,  0.7842,  0.1848,
        0.0669,  0.0856,  0.8475
    );




    // Apply the matrix transformation
     float3 out = make_float3(
            M_A_to_B[0][0] * rgb.x + M_A_to_B[0][1] * rgb.y + M_A_to_B[0][2] * rgb.z,
            M_A_to_B[1][0] * rgb.x + M_A_to_B[1][1] * rgb.y + M_A_to_B[1][2] * rgb.z,
            M_A_to_B[2][0] * rgb.x + M_A_to_B[2][1] * rgb.y + M_A_to_B[2][2] * rgb.z
        );

    return out;
}

__DEVICE__ float MYCinelike_to_Linear(float value)
{


    float cal = (pow(10, (value - 0.9468) / 0.59) / 1.2) - 0.0256;
    

    return cal;
}


__DEVICE__ float3 Linear_to_DWG(float3 curve)
{
    float DI_A = 0.0075f;
    float DI_B = 7.0f;
    float DI_C = 0.07329248f;
    float DI_M = 10.44426855f;
    float DI_LIN_CUT = 0.00262409f;



    float R = curve.x<DI_LIN_CUT ? curve.x*DI_M : (log2(curve.x + DI_A) + DI_B)*DI_C;

    float G = curve.y<DI_LIN_CUT ? curve.y*DI_M : (log2(curve.y + DI_A) + DI_B)*DI_C;

    float B = curve.z<DI_LIN_CUT ? curve.z*DI_M : (log2(curve.z + DI_A) + DI_B)*DI_C;


    const float3 V = make_float3(R, G, B);

    return V;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 rgb = make_float3(p_R, p_G, p_B);
    
    float linR = MYCinelike_to_Linear(p_R);
    float linG = MYCinelike_to_Linear(p_G);
    float linB = MYCinelike_to_Linear(p_B);
    float3 linear = make_float3(linR, linG, linB)*1.5;

    float3 gamut = D-Gamut_to_DWG(linear);


    float3 Linear_to_DaVinciIntermediate = Linear_to_DWG(gamut);



    float3 out = Linear_to_DaVinciIntermediate;


    return out;
}












DEFINE_UI_PARAMS(flare, Flare, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.1)
DEFINE_UI_PARAMS(CST, Colour Space, DCTLUI_COMBO_BOX, 0, {DWG, LOGC3, ACESCCT }, { Davinci Intermediate, ARRI LogC3, Aces CCT})
DEFINE_UI_PARAMS(toe, Protect Blacks, DCTLUI_CHECK_BOX, 0)



__DEVICE__ float3 DWG_to_Linear(float3 rgb)
{
    float DI_A = 0.0075f;
    float DI_B = 7.0f;
    float DI_C = 0.07329248f;
    float DI_M = 10.44426855f;
    float DI_LOG_CUT = 0.02740668f;
   

    float R = _powf(2.0, (rgb.x / DI_C) - DI_B)-DI_A;

    if (rgb.x<=DI_LOG_CUT){
    R = rgb.x/DI_M;
    }
    else {
    R = _powf(2.0, (rgb.x / DI_C) - DI_B)-DI_A;
    }

    float G = _powf(2.0, (rgb.y / DI_C) - DI_B)-DI_A;

    if (rgb.y<=DI_LOG_CUT){
    G = rgb.y/DI_M;
    }
    else {
    G = _powf(2.0, (rgb.y / DI_C) - DI_B)-DI_A;
    }

    float B = _powf(2.0, (rgb.z / DI_C) - DI_B)-DI_A;

    if (rgb.z<=DI_LOG_CUT){
    B = rgb.z/DI_M;
    }
    else {
    B = _powf(2.0, (rgb.z / DI_C) - DI_B)-DI_A;
    }

    const float3 L = make_float3(R, G, B);

    return L;
}

__DEVICE__ float3 Linear_to_DWG(float3 curve)
{
    float DI_A = 0.0075;
    float DI_B = 7.0;
    float DI_C = 0.07329248;
    float DI_M = 10.44426855;
    float DI_LIN_CUT = 0.00262409;


    float R = curve.x<=DI_LIN_CUT ? curve.x*DI_M : (log2(curve.x + DI_A) + DI_B)*DI_C;


    float G = curve.y<=DI_LIN_CUT ? curve.y*DI_M : (log2(curve.y + DI_A) + DI_B)*DI_C;

    float B = curve.z<=DI_LIN_CUT ? curve.z*DI_M : (log2(curve.z + DI_A) + DI_B)*DI_C;


    const float3 V = make_float3(R, G, B);

    return V;
}

__DEVICE__ float3 ACES_CCT_to_Linear(float3 rgb)
{
    float ACES_LoCut = 0.155251141552511f;
    float ACES_HiCut = (_log2f(65504.0f) + 9.72)/17.52f;

    float R;

    if (rgb.x >= ACES_LoCut && rgb.x < ACES_HiCut){
        R = _powf(2,(rgb.x*17.52f-9.72f));
    }
    else if (rgb.x <= ACES_LoCut){
        R = (rgb.x-0.0729055341958355f)/10.5402377416545f;
    }

    else {R = 65504.f;
    }

    float G;

    if (rgb.y >= ACES_LoCut && rgb.y < ACES_HiCut){
        G = _powf(2,(rgb.y*17.52f-9.72f));
    }

    else if (rgb.y <= ACES_LoCut){
        G = (rgb.y-0.0729055341958355f)/10.5402377416545f;
    }
    else {G = 65504.f;};

    float B;

    if (rgb.z >= ACES_LoCut && rgb.z < ACES_HiCut){
        B = _powf(2,(rgb.z*17.52f-9.72f));
    }
    else if (rgb.z <= ACES_LoCut){
        B = (rgb.z-0.0729055341958355f)/10.5402377416545f;
    }
    else {B = 65504.f;}


    float3 L = make_float3(R, G, B);

    return L;
}

__DEVICE__ float3 Linear_to_ACES_CCT(float3 curve)
{
    float Lin_Cut = 0.0078125f;

    float R = curve.x <= Lin_Cut ? 10.5402377416545 * curve.x * 0.0729055341958355 : (log2(curve.x) + 9.72f)/17.52f;

    float G = curve.y <= Lin_Cut ? 10.5402377416545 * curve.y * 0.0729055341958355 : (log2(curve.y) + 9.72f)/17.52f;

    float B = curve.z <= Lin_Cut ? 10.5402377416545 * curve.z * 0.0729055341958355 : (log2(curve.z) + 9.72f)/17.52f;

    const float3 V = make_float3(R, G, B);

    return V;
}


__DEVICE__ float3 ARRI_LogC3_to_Linear(float3 rgb)
{
    float cut = 0.004201f;
    float a = 200.0f;
    float b = -0.729169f;
    float c = 0.247190f;
    float d = 0.385537f;
    float e = 193.235573f;
    float f = -0.662201f;

    float R = (rgb.x > e * cut + f) ? (_powf(10, (rgb.x - d) / c) - b) / a: (rgb.x - f) / e;

    float G = (rgb.y > e * cut + f) ? (_powf(10, (rgb.y - d) / c) - b) / a: (rgb.y - f) / e;

    float B = (rgb.z > e * cut + f) ? (_powf(10, (rgb.z - d) / c) - b) / a: (rgb.z - f) / e;

    const float3 L = make_float3(R, G, B);

    return L;
}

__DEVICE__ float3 Linear_to_ARRI_LogC3(float3 curve)
{
    float cut = 0.004201f;
    float a = 200.0f;
    float b = -0.729169f;
    float c = 0.247190f;
    float d = 0.385537f;
    float e = 193.235573f;
    float f = -0.662201f;

    float R = (curve.x > cut) ? c * log10(a * curve.x + b) + d: e * curve.x + f;

    float G = (curve.y > cut) ? c * log10(a * curve.y + b) + d: e * curve.y + f;

    float B = (curve.z > cut) ? c * log10(a * curve.z + b) + d: e * curve.z + f;

    const float3 V = make_float3(R, G, B);

    return V;
}


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    

    flare = flare*0.2;
    
    float lift = -1*flare/2+1.0;

    float thrsh = 0.18;

    float3 rgb = {p_R, p_G, p_B};


    switch (CST) {
    case DWG:
    {rgb = DWG_to_Linear(rgb);}
    break;
    case LOGC3:
    {rgb = ARRI_LogC3_to_Linear(rgb);}
    case ACESCCT:
    {rgb = ACES_CCT_to_Linear(rgb);}
    };


    float3 lift_op;
    lift_op.x = (rgb.x - thrsh) * lift + thrsh;
    lift_op.y = (rgb.y - thrsh) * lift + thrsh;
    lift_op.z = (rgb.z - thrsh) * lift + thrsh;

    float3 out;
    out.x = mix(lift_op.x, rgb.x, rgb.x < thrsh ? rgb.x/thrsh : 1.0);
    out.y = mix(lift_op.y, rgb.y, rgb.y < thrsh ? rgb.y/thrsh : 1.0);
    out.z = mix(lift_op.z, rgb.z, rgb.z < thrsh ? rgb.z/thrsh : 1.0);

    out.x = out.x < 0.001333154 && toe==1 ? exp(out.x*3000-2.79602734)/10000 +0.001 : out.x;
    out.y = out.y < 0.001333154 && toe==1 ? exp(out.y*3000-2.79602734)/10000 +0.001 : out.y;
    out.z = out.z < 0.001333154 && toe==1 ? exp(out.z*3000-2.79602734)/10000 +0.001 : out.z;

     switch (CST) {
    case DWG:
    {out = Linear_to_DWG(out);}
    break;
    case LOGC3:
    {out = Linear_to_ARRI_LogC3(out);}
    case ACESCCT:
    {out = Linear_to_ACES_CCT(out);}
    };

    return out;
}